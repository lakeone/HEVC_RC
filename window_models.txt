
X = R * QP 表示帧的复杂度
ratio = X / avgX

初始化：
  	  m_windowsL = (frameRate < m_framesLeft ? frameRate : m_framesLeft );
  	  m_windowsBits = (Double)m_targetRate * m_windowsL / (Double)m_frameRate;

比特分配：

	  bppw = (Double)m_encRCSeq->m_windowsBits / (Double)m_encRCSeq->m_windowsL / (Double)m_numberOfPixel;
	  
	  if (m_encRCSeq->m_num >= 10)
	  {
		  Double ratio = m_encRCSeq->m_last_complex * m_encRCSeq->m_num / m_encRCSeq->m_complex;
		  //if (ratio < 0.7)
			 // bppw = bppw * 0.6;
		  //else if (ratio < 1.0)
			 // bppw = bppw * ratio * 0.9;
		  //else if (ratio < 1.5)
			 // bppw = bppw * ratio * 1.1;
		  //else if (ratio >= 1.5)
			 // bppw = bppw * ratio * 1.3;
		  if (ratio < 0.8)
			  bppw = bppw * 0.8 * ratio;
		  else if (ratio < 1.2)
			  ;
		  else if (ratio < 2)
			  bppw = bppw * ratio * 1.1;
		  else
			  bppw = bppw * ratio * 1.3;

	  }
	  bpp = bppw;



更新：

	  rcSeq->m_windowsBits -= actualTotalBits;
	  if (rcSeq->m_framesLeft >= rcSeq->m_windowsL)
	  {
		  rcSeq->m_windowsBits += (rcSeq->m_bitsLeft - rcSeq->m_windowsBits) / (rcSeq->m_framesLeft - rcSeq->m_windowsL + 1);
	  }
	  else if (rcSeq->m_framesLeft < rcSeq->m_windowsL)
	  {
		  rcSeq->m_windowsL--;
		  if (rcSeq->m_windowsL < 0)
		  {
			  cout << "windowsL error" << endl;
			  exit(0);
		  }
	  }